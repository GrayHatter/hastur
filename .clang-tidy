---
# -bugprone-exception-escape: We don't use exceptions and will be building with
# -fno-exceptions soon.
#
# -bugprone-narrowing-conversions: Very noisy for not much gain.
#
# -bugprone-unchecked-optional-access: Makes clang-tidy hang during CI.
# https://github.com/llvm/llvm-project/issues/59492
#
# -cert-dcl21-cpp: Deprecated, will be removed in clang-tidy 19.
# https://clang.llvm.org/extra/clang-tidy/checks/cert/dcl21-cpp.html
#
# -clang-analyzer-cplusplus.NewDeleteLeaks: Lots of false positives w/
# -std=c++2b when calling std::make_shared in the JS AST.
# js/ast_executor_test.cpp:176:5: error: Potential leak of memory pointed to by
# field '_M_pi' [clang-analyzer-cplusplus.NewDeleteLeaks,-warnings-as-errors]
# Very similar call stack to https://github.com/llvm/llvm-project/issues/55219
#
# -clang-analyzer-optin.cplusplus.UninitializedObject: Triggered by libfmt
# format strings on the line we instantiate them.
#
# -clang-diagnostic-builtin-macro-redefined: Bazel redefines a lot of builtin
# macros to set up a reproducible build.
#
# -google-build-using-namespace: We use `using namespace` in tests and for std::literals.
#
# -google-readability-braces-around-statements: Crashes clang-tidy-14/15.
# Stack dump:
# 0.      Program arguments: clang-tidy-15 -p=/home/robin/code/hastur -quiet /home/robin/code/hastur/dom2/character_data_test.cpp
# 1.      <eof> parser at end of file
# 2.      ASTMatcher: Processing 'google-readability-braces-around-statements' against:
#         IfStmt : </usr/lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:520:5, col:56>
#
# -misc-const-correctness: Consts some things that can't be const, and very very noisy.
#
# -misc-no-recursion: We use a lot of recursion.
#
# -modernize-make-unique, -modernize-use-emplace: Clang doesn't implement p0960
# yet, and we're not adding c-tors to all our structs.
#
# -modernize-use-nodiscard: Very noisy, and probably more meaningful if we only
# add it where it matters.
#
# -modernize-use-trailing-return-type: Stylistic change, and something we
# haven't been doing so far.
#
# -performance-move-const-arg: Having to know which types are trivially copyable
# seems like unnecessary effort when calling std::move on them isn't really
# harmful.
Checks: >
  bugprone-*,
  cert-*,
  concurrency-*,
  cppcoreguidelines-pro-type-cstyle-cast,
  cppcoreguidelines-pro-type-member-init,
  google-*,
  misc-*,
  modernize-*,
  performance-*,
  readability-identifier-naming,
  readability-inconsistent-declaration-parameter-name,
  readability-qualified-auto,
  -bugprone-exception-escape,
  -bugprone-narrowing-conversions,
  -bugprone-unchecked-optional-access,
  -cert-dcl21-cpp,
  -clang-analyzer-cplusplus.NewDeleteLeaks,
  -clang-analyzer-optin.cplusplus.UninitializedObject,
  -clang-diagnostic-builtin-macro-redefined,
  -google-build-using-namespace,
  -google-readability-braces-around-statements,
  -misc-const-correctness,
  -misc-no-recursion,
  -modernize-make-unique,
  -modernize-use-emplace,
  -modernize-use-nodiscard,
  -modernize-use-trailing-return-type,
  -performance-move-const-arg,

# Workaround for https://github.com/llvm/llvm-project/issues/56709 making it
# impossible to disable the clang-diagnostic-builtin-macro-redefined warning in
# clang-tidy-16.
WarningsAsErrors: "*,-clang-diagnostic-builtin-macro-redefined"

HeaderFilterRegex: "\\./(archive|browser|css|css2|dom|dom2|engine|etest|geom|gfx|html|html2|img|js|layout|net|os|protocol|render|style|tui|uri|url|util|wasm)/"

CheckOptions:
  # readability-identifier-naming
  # Classes, structs, ...
  - key: readability-identifier-naming.NamespaceCase
    value: lower_case
  - key: readability-identifier-naming.ClassCase
    value: CamelCase
  - key: readability-identifier-naming.StructCase
    value: CamelCase
  - key: readability-identifier-naming.EnumCase
    value: CamelCase

  # Variables, member variables, ...
  - key: readability-identifier-naming.ParameterCase
    value: lower_case
  - key: readability-identifier-naming.VariableCase
    value: lower_case
  - key: readability-identifier-naming.MemberCase
    value: lower_case
  - key: readability-identifier-naming.ProtectedMemberCase
    value: lower_case
  - key: readability-identifier-naming.ProtectedMemberSuffix
    value: _
  - key: readability-identifier-naming.PrivateMemberCase
    value: lower_case
  - key: readability-identifier-naming.PrivateMemberSuffix
    value: _

  # Functions, methods, ...
  - key: readability-identifier-naming.FunctionCase
    value: lower_case
  - key: readability-identifier-naming.MethodCase
    value: lower_case

  # Constants
  - key: readability-identifier-naming.ConstantCase
    value: lower_case
  - key: readability-identifier-naming.ConstexprVariablePrefix
    value: k
  - key: readability-identifier-naming.ConstexprVariableCase
    value: CamelCase
  - key: readability-identifier-naming.EnumConstantCase
    value: CamelCase

  # misc-non-private-member-variables-in-classes
  - key: misc-non-private-member-variables-in-classes.IgnoreClassesWithAllMemberVariablesBeingPublic
    value: true
